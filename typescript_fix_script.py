#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π TypeScript —Ç–∏–ø–æ–≤ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç —Ü–µ–ª–æ–≥–æ –∫ —Ü–µ–ª–æ–º—É: —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ -> –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

import os
import json
from pathlib import Path

def create_global_types():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ (–æ–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤) –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
    """
    
    types_content = '''/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏—è window –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π
interface FlipConfig {
  DURATION: number;
  EASING: string;
  ELASTIC_EASING: string;
  Z_INDEX: number;
  SCALE_FACTOR: number;
  BLUR_AMOUNT: number;
}

// –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è FLIP –∞–Ω–∏–º–∞—Ü–∏–∏
interface ElementRect {
  left: number;
  top: number;
  width: number;
  height: number;
  centerX: number;
  centerY: number;
  transform: string;
  borderRadius: string;
  background: ElementBackground;
  zIndex: string;
}

// –§–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ü–≤–µ—Ç)
interface ElementBackground {
  type: 'image' | 'color';
  src?: string;
  objectFit?: string;
  objectPosition?: string;
  background?: string;
  backgroundColor?: string;
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä FLIP –∞–Ω–∏–º–∞—Ü–∏–π
interface FlipAnimationController {
  activeAnimations: Map<string, Animation>;
  animationElements: Set<HTMLElement>;
  isAnimating: boolean;
  hiddenElements: Map<HTMLElement, any>;
  
  captureElementRect(element: HTMLElement): ElementRect | null;
  extractBackground(element: HTMLElement): ElementBackground;
  createAnimationElement(sourceRect: ElementRect, sourceElement: HTMLElement): HTMLElement;
  applyBackground(element: HTMLElement, background: ElementBackground, sourceElement: HTMLElement): void;
  calculateTargetRect(modalContainer?: HTMLElement): ElementRect;
  animateOpen(sourceElement: HTMLElement, targetContainer?: HTMLElement, onComplete?: () => Promise<void>): Promise<void>;
  animateClose(modalContainer: HTMLElement, targetElement: HTMLElement, onComplete?: () => Promise<void>): Promise<void>;
  hideElementSafely(element: HTMLElement): void;
  restoreElementSafely(element: HTMLElement): void;
  cleanupAnimation(animationEl: HTMLElement): void;
  cleanup(): void;
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è FlipAnimationController
interface FlipAnimationControllerConstructor {
  new(): FlipAnimationController;
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π
interface FlipUtils {
  forceRestoreElement(element: HTMLElement): void;
}

// –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
interface PortfolioProject {
  id: string;
  title: string;
  description: string;
  audience: string;
  slides: Array<{
    image: {
      src: string;
      width?: number;
      height?: number;
    };
    task?: string;
    solution?: string;
  }>;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Window
declare global {
  interface Window {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π
    FLIP_CONFIG: FlipConfig;
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ FLIP –∞–Ω–∏–º–∞—Ü–∏–π
    FlipAnimationController: FlipAnimationControllerConstructor;
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    globalFlipController: FlipAnimationController;
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π
    flipUtils: FlipUtils;
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    portfolioProjects: PortfolioProject[];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
export {};
'''
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src/types –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    types_dir = Path('src/types')
    types_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–∏–ø–æ–≤
    types_file = types_dir / 'global.d.ts'
    with open(types_file, 'w', encoding='utf-8') as f:
        f.write(types_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {types_file}")
    return types_file

def update_tsconfig():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç tsconfig.json –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    –ü—Ä–∏–Ω—Ü–∏–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã -> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    """
    
    tsconfig_path = Path('tsconfig.json')
    
    if not tsconfig_path.exists():
        print("‚ùå –§–∞–π–ª tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(tsconfig_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤ include –µ—Å—Ç—å src/types
        include_list = config.get('include', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º src/types –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        types_pattern = 'src/types/**/*'
        if types_pattern not in include_list:
            include_list.append(types_pattern)
            config['include'] = include_list
            
            with open(tsconfig_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω tsconfig.json: –¥–æ–±–∞–≤–ª–µ–Ω {types_pattern}")
        else:
            print("‚úÖ tsconfig.json —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tsconfig.json: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tsconfig.json: {e}")
        return False

def verify_types_integration():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
    –ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç —Ü–µ–ª–æ–≥–æ: —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
    """
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–∏–ø–æ–≤
    types_file = Path('src/types/global.d.ts')
    checks.append(('–§–∞–π–ª —Ç–∏–ø–æ–≤ —Å–æ–∑–¥–∞–Ω', types_file.exists()))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º tsconfig.json
    tsconfig_path = Path('tsconfig.json')
    tsconfig_ok = False
    if tsconfig_path.exists():
        try:
            with open(tsconfig_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            include_list = config.get('include', [])
            tsconfig_ok = any('src/types' in item for item in include_list)
        except:
            pass
    
    checks.append(('tsconfig.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω', tsconfig_ok))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    important_files = [
        'src/pages/index.astro',
        'src/styles/flip-animations.css',
        'src/styles/modal-transitions.css'
    ]
    
    for file_path in important_files:
        checks.append((f'–§–∞–π–ª {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', Path(file_path).exists()))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:")
    all_ok = True
    for check_name, is_ok in checks:
        status = "‚úÖ" if is_ok else "‚ùå"
        print(f"  {status} {check_name}")
        if not is_ok:
            all_ok = False
    
    return all_ok

def create_env_d_ts():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    
    env_types_content = '''/**
 * –û–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ Astro
 */

/// <reference types="astro/client" />

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è Astro
declare namespace App {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
}

// –¢–∏–ø—ã –¥–ª—è CSS –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)
declare module '*.module.css' {
  const classes: { [key: string]: string };
  export default classes;
}

// –¢–∏–ø—ã –¥–ª—è SVG —Ñ–∞–π–ª–æ–≤
declare module '*.svg' {
  const content: any;
  export default content;
}

// –¢–∏–ø—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
declare module '*.png' {
  const src: string;
  export default src;
}

declare module '*.jpg' {
  const src: string;
  export default src;
}

declare module '*.jpeg' {
  const src: string;
  export default src;
}

declare module '*.webp' {
  const src: string;
  export default src;
}
'''
    
    env_file = Path('src/env.d.ts')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            existing_content = f.read()
        
        # –ï—Å–ª–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if '/// <reference types="astro/client" />' in existing_content:
            print("‚úÖ –§–∞–π–ª env.d.ts —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return env_file
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_types_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—ã: {env_file}")
    return env_file

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–µ–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
    –û—Ç –ø—Ä–æ–±–ª–µ–º—ã (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Ç–∏–ø–æ–≤) –∫ —Ä–µ—à–µ–Ω–∏—é (—Å–∏–Ω—Ç–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
    """
    
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫ –¥–ª—è FLIP –∞–Ω–∏–º–∞—Ü–∏–π")
    print("=" * 60)
    
    # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤...")
    types_file = create_global_types()
    
    # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—ã
    print("\nüåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    env_file = create_env_d_ts()
    
    # –≠—Ç–∞–ø 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π TypeScript
    print("\n‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
    tsconfig_updated = update_tsconfig()
    
    # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    verification_passed = verify_types_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if verification_passed and tsconfig_updated:
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("  ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤")
        print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–∏–ø—ã —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TypeScript")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: TypeScript –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ TypeScript Language Server –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    print("\nüîÑ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ TypeScript Language Server")
    print("  2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –æ—à–∏–±–∫–∏ –∏—Å—á–µ–∑–ª–∏")

if __name__ == "__main__":
    main()
