---
interface Props {
  width?: string
  height?: string
  className?: string
  variant?: 'rectangular' | 'circle' | 'text'
  shimmerIntensity?: 'subtle' | 'normal' | 'intense'
  duration?: number
  delay?: number
}

const {
  width = '100%',
  height = '1rem',
  className = '',
  variant = 'rectangular',
  shimmerIntensity = 'normal',
  duration = 1.5,
  delay = 0,
} = Astro.props

const variantClasses = {
  rectangular: 'rounded-md',
  circle: 'rounded-full',
  text: 'rounded-sm',
}

const shimmerClasses = {
  subtle: 'skeleton-shimmer-subtle',
  normal: 'skeleton-shimmer-normal',
  intense: 'skeleton-shimmer-intense',
}

const baseClass = 'skeleton-loader relative overflow-hidden bg-gray-200/20'
const variantClass = variantClasses[variant]
const shimmerClass = shimmerClasses[shimmerIntensity]

const inlineStyles = {
  width,
  height,
  animationDelay: `${delay}s`,
  animationDuration: `${duration}s`,
}
---

<div
  class:list={[baseClass, variantClass, shimmerClass, className]}
  style={inlineStyles}
  role="img"
  aria-label="Загрузка контента"
>
  <!-- Shimmer overlay -->
  <div class="skeleton-shimmer-overlay"></div>

  <!-- Дополнительный контент (слот) -->
  <slot />
</div>

<style>
  .skeleton-loader {
    --skeleton-base-color: var(--color-skeleton);
    --skeleton-shimmer-color: rgba(255, 255, 255, 0.4);
    --skeleton-animation-timing: var(--ease-natural);
    --skeleton-duration: var(--shimmer-duration);

    background-color: var(--skeleton-base-color);
    position: relative;
    isolation: isolate;
    z-index: var(--z-skeleton);
    box-sizing: border-box;
    will-change: transform, opacity;
  }

  .skeleton-shimmer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent 0%,
      var(--skeleton-shimmer-color) 40%,
      var(--skeleton-shimmer-color) 60%,
      transparent 100%
    );
    transform: translateX(-100%);
    animation: skeleton-shimmer var(--skeleton-duration)
      var(--skeleton-animation-timing) infinite;
    z-index: 1;
  }

  .skeleton-shimmer-subtle {
    --skeleton-shimmer-color: rgba(255, 255, 255, 0.2);
  }

  .skeleton-shimmer-normal {
    --skeleton-shimmer-color: rgba(255, 255, 255, 0.4);
  }

  .skeleton-shimmer-intense {
    --skeleton-shimmer-color: rgba(255, 255, 255, 0.6);
  }

  @keyframes skeleton-shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  /* Поддержка prefers-reduced-motion */
  @media (prefers-reduced-motion: reduce) {
    .skeleton-shimmer-overlay {
      animation: skeleton-pulse 2s ease-in-out infinite;
    }

    @keyframes skeleton-pulse {
      0%,
      100% {
        opacity: 1;
      }
      50% {
        opacity: 0.5;
      }
    }
  }

  /* Темная тема */
  @media (prefers-color-scheme: dark) {
    .skeleton-loader {
      --skeleton-base-color: rgba(55, 65, 81, 0.3);
      --skeleton-shimmer-color: rgba(255, 255, 255, 0.1);
    }
  }
</style>
