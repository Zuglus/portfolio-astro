---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import PortfolioSection from '../components/PortfolioSection.astro';
import ContactSection from '../components/ContactSection.astro';
import Footer from '../components/Footer.astro';
import { projects } from '../data/projects';
---

<Layout title="Полина Мигранова | Графический дизайнер">
  <main 
    class="bg-primary text-white min-h-screen"
    x-data="{
      isModalOpen: false,
      currentProject: null,
      currentSlideIndex: 0,
      modalContainer: null,
      isFlipAnimating: false,
      flipController: null,
      
      init() {
        this.initializeFlipController();
        this.setupEventListeners();
        
        this.$nextTick(() => {
          this.modalContainer = this.$refs.modalContent;
        });
      },
      
      initializeFlipController() {
        // Используем встроенный FLIP контроллер вместо импорта
        if (window.FlipAnimationController) {
          this.flipController = new window.FlipAnimationController();
          console.log('FLIP контроллер инициализирован');
        } else {
          console.warn('FLIP контроллер недоступен');
          this.flipController = null;
        }
      },
      
      setupEventListeners() {
        document.addEventListener('flip-open-modal', (e) => {
          this.handleFlipOpenModal(e.detail);
        });
        
        document.addEventListener('open-modal', (e) => {
          this.openModal(e.detail.projectId, false);
        });
        
        document.addEventListener('keydown', (e) => {
          if (!this.isModalOpen || this.isFlipAnimating) return;
          
          if (e.key === 'Escape') {
            this.closeModal();
          } else if (e.key === 'ArrowRight') {
            this.nextSlide();
          } else if (e.key === 'ArrowLeft') {
            this.prevSlide();
          }
        });
      },
      
      async handleFlipOpenModal({ projectId, sourceElement, cardIndex }) {
        if (this.isFlipAnimating || this.isModalOpen) return;
        
        try {
          this.isFlipAnimating = true;
          
          const project = window.portfolioProjects?.find(p => p.id === projectId);
          if (!project) {
            throw new Error('Проект не найден');
          }
          
          this.currentProject = project;
          this.currentSlideIndex = 0;
          
          sourceElement.classList.add('flip-animating');
          
          if (this.flipController) {
            await this.flipController.animateOpen(
              sourceElement,
              this.modalContainer,
              () => this.completeModalOpen()
            );
          } else {
            await this.completeModalOpen();
          }
          
        } catch (error) {
          console.warn('Ошибка FLIP анимации:', error);
          this.openModal(projectId, false);
        } finally {
          this.isFlipAnimating = false;
        }
      },
      
      async completeModalOpen() {
        this.isModalOpen = true;
        document.body.style.overflow = 'hidden';
        
        await this.$nextTick();
        
        if (this.modalContainer) {
          this.modalContainer.classList.add('flip-ready');
        }
        
        setTimeout(() => {
          document.dispatchEvent(new CustomEvent('flip-animation-complete'));
        }, 100);
      },
      
      openModal(projectId, useFlip = true) {
        if (this.isModalOpen) return;
        
        const project = window.portfolioProjects?.find(p => p.id === projectId);
        if (project) {
          this.currentProject = project;
          this.currentSlideIndex = 0;
          this.isModalOpen = true;
          document.body.style.overflow = 'hidden';
          
          this.$nextTick(() => {
            if (this.modalContainer) {
              this.modalContainer.classList.add('flip-ready');
            }
          });
        }
      },
      
      async closeModal() {
        if (!this.isModalOpen || this.isFlipAnimating) return;
        
        try {
          this.isFlipAnimating = true;
          
          const sourceElement = document.querySelector(`[data-flip-source='${this.currentProject?.id}']`);
          
          if (this.modalContainer) {
            this.modalContainer.classList.remove('flip-ready');
            this.modalContainer.classList.add('flip-exiting');
          }
          
          if (this.flipController && sourceElement) {
            await this.flipController.animateClose(
              this.modalContainer,
              sourceElement,
              () => this.completeModalClose()
            );
          } else {
            setTimeout(() => this.completeModalClose(), 200);
          }
          
        } catch (error) {
          console.warn('Ошибка FLIP анимации закрытия:', error);
          this.completeModalClose();
        } finally {
          this.isFlipAnimating = false;
        }
      },
      
      completeModalClose() {
        this.isModalOpen = false;
        this.currentProject = null;
        this.currentSlideIndex = 0;
        document.body.style.overflow = '';
        
        if (this.modalContainer) {
          this.modalContainer.classList.remove('flip-ready', 'flip-exiting');
        }
        
        document.dispatchEvent(new CustomEvent('flip-animation-complete'));
      },
      
      nextSlide() {
        if (this.currentProject && this.currentProject.slides) {
          const totalSlides = this.currentProject.slides.length;
          this.currentSlideIndex = (this.currentSlideIndex + 1) % totalSlides;
        }
      },
      
      prevSlide() {
        if (this.currentProject && this.currentProject.slides) {
          const totalSlides = this.currentProject.slides.length;
          this.currentSlideIndex = this.currentSlideIndex === 0 
            ? totalSlides - 1 
            : this.currentSlideIndex - 1;
        }
      },
      
      get currentSlide() {
        return this.currentProject?.slides?.[this.currentSlideIndex] || null;
      }
    }"
  >
    <Header />
    <PortfolioSection />
    <ContactSection />
    <Footer />

    <div 
      x-show="isModalOpen" 
      x-transition:enter="transition-opacity duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition-opacity duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      @click.self="closeModal()" 
      class="fixed inset-0 z-50 flex items-center justify-center flip-modal-backdrop"
      :class="{ 'flip-entering': isModalOpen && !isFlipAnimating }"
      style="display: none; background: rgba(0, 0, 0, 0.8); backdrop-filter: blur(8px);"
    >
      <div 
        x-ref="modalContent"
        x-show="isModalOpen"
        @click.stop=""
        class="relative w-full max-w-7xl mx-auto bg-primary border border-white/10 rounded-[1.875rem] md:rounded-[1.25rem] shadow-xl overflow-hidden flip-modal-content"
      >
        <div class="h-[90vh] overflow-y-auto modal-scrollbar">
          <div class="p-[3.75rem] md:p-[2.5rem]">
            <header class="space-y-[2.8125rem] md:space-y-[1.875rem] mb-8" x-show="currentProject">
              <div>
                <h3 
                  x-text="currentProject?.title || ''"
                  class="font-mv-skifer text-[4.6875rem] md:text-[3.125rem]"
                ></h3>
                <h4 
                  x-text="currentProject?.description || ''"
                  class="mb-4 font-extralight text-[3.28125rem] md:text-2xl leading-normal"
                  x-show="currentProject?.description"
                ></h4>
                <p 
                  class="font-onest text-[3.28125rem] md:text-[1.25rem]"
                  x-show="currentProject?.audience"
                >
                  <span class="font-semibold">Целевая аудитория: </span>
                  <span class="opacity-80" x-text="currentProject?.audience || ''"></span>
                </p>
              </div>
            </header>

            <div class="slider w-full max-w-[93.75rem] mx-auto overflow-hidden group relative" x-show="currentSlide">
              <div class="overflow-hidden mb-6">
                <img
                  x-bind:src="currentSlide?.image?.src || ''"
                  x-bind:alt="`${currentProject?.title || ''} - слайд ${currentSlideIndex + 1}`"
                  class="w-full object-contain rounded-[1.25rem]"
                  loading="lazy"
                />
              </div>

              <div class="flex justify-center space-x-6 mb-6" x-show="currentProject?.slides?.length > 1">
                <button
                  @click="prevSlide()"
                  class="border transition-all duration-300 rounded-full flex items-center justify-center text-7xl w-[5rem] h-[5rem] border-white/20 hover:bg-white hover:text-[#3624A6] cursor-pointer active:scale-95 transform md:w-[3rem] md:h-[3rem] md:text-5xl"
                  aria-label="Предыдущий слайд"
                  :disabled="isFlipAnimating"
                >&larr;</button>

                <button
                  @click="nextSlide()"
                  class="border transition-all duration-300 rounded-full flex items-center justify-center text-7xl w-[5rem] h-[5rem] border-white/20 hover:bg-white hover:text-[#3624A6] cursor-pointer active:scale-95 transform md:w-[3rem] md:h-[3rem] md:text-5xl"
                  aria-label="Следующий слайд"
                  :disabled="isFlipAnimating"
                >&rarr;</button>
              </div>

              <div class="font-onest text-[3.28125rem] md:text-[1.25rem] space-y-4">
                <p x-show="currentSlide?.task">
                  <span class="font-semibold">Задача: </span>
                  <span class="opacity-80" x-text="currentSlide?.task || ''"></span>
                </p>
                <p x-show="currentSlide?.solution">
                  <span class="font-semibold">Решение: </span>
                  <span class="opacity-80" x-text="currentSlide?.solution || ''"></span>
                </p>
              </div>
            </div>
          </div>
        </div>

        <button
          @click="closeModal()"
          class="absolute top-6 right-6 p-4 md:p-2 rounded-full bg-black/40 backdrop-blur-sm hover:bg-black/60 focus:outline-none focus:ring-2 focus:ring-white/50 z-50 group transition-all duration-300 ease-in-out shadow-lg"
          aria-label="Закрыть"
          :disabled="isFlipAnimating"
        >
          <svg
            class="w-12 h-12 md:w-6 md:h-6 text-white/80 group-hover:text-white transition-colors duration-300 ease-in-out"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ projects }}>
  window.portfolioProjects = projects;
</script>

<!-- FLIP КОНТРОЛЛЕР - НОВАЯ АРХИТЕКТУРА -->
<script>
// Импорт и инициализация FLIP контроллера
import { FlipAnimationController, FLIP_CONFIG } from '../utils/flipController.js';

// Устанавливаем глобальные объекты для совместимости
window.FLIP_CONFIG = FLIP_CONFIG;
window.FlipAnimationController = FlipAnimationController;
window.globalFlipController = new FlipAnimationController();

// Глобальные утилиты для FLIP анимаций
window.flipUtils = {
  forceRestoreElement(element) {
    if (element && window.globalFlipController) {
      window.globalFlipController.restoreElementSafely(element);
    }
  }
};

// Очистка при выгрузке страницы
window.addEventListener('beforeunload', () => {
  if (window.globalFlipController) {
    window.globalFlipController.cleanup();
  }
});

// Дополнительная очистка при ошибках
window.addEventListener('error', () => {
  if (window.globalFlipController) {
    window.globalFlipController.cleanup();
  }
});

console.log('FLIP анимации инициализированы с новой архитектурой');
</script>
</script>