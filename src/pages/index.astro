---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import PortfolioSection from '../components/PortfolioSection.astro';
import ContactSection from '../components/ContactSection.astro';
import Footer from '../components/Footer.astro';
import { projects } from '../data/projects';
---

<script is:inline define:vars={{ projects }}>
  // Ensure proper UTF-8 encoding for projects data
  window.portfolioProjects = JSON.parse(JSON.stringify(projects));
</script>

<Layout title="Полина Мигранова | Графический дизайнер">
  <main 
    class="bg-primary text-white min-h-screen"
    x-data="{
      isModalOpen: false,
      currentProject: null,
      currentSlideIndex: 0,
      isTransitioning: false,
      isContentVisible: true,
      isImageLoading: false,
      isInitialLoad: false,
      currentImageAspectRatio: null,
      isImageZoomed: false,
      
      init() {
        this.setupEventListeners();
      },
      
      setupEventListeners() {
        document.addEventListener('open-modal', (e) => {
          this.openModal(e.detail.projectId);
        });
        
        document.addEventListener('keydown', (e) => {
          if (!this.isModalOpen) return;
          
          if (e.key === 'Escape') {
            if (this.isImageZoomed) {
              this.closeZoom();
            } else {
              this.closeModal();
            }
          } else if (e.key === 'ArrowRight' && !this.isImageZoomed) {
            this.nextSlide();
          } else if (e.key === 'ArrowLeft' && !this.isImageZoomed) {
            this.prevSlide();
          }
        });
      },
      
      async openModal(projectId) {
        if (this.isModalOpen) return;
        
        const projects = window.portfolioProjects;
        if (!projects) return;
        
        const project = projects.find(p => p.id === projectId);
        if (project) {
          this.currentProject = project;
          this.currentSlideIndex = 0;
          this.isContentVisible = false;
          this.isInitialLoad = true;
          this.isModalOpen = true;
          document.body.style.overflow = 'hidden';
          
          // Загружаем первое изображение
          try {
            const firstSlide = project.slides?.[0];
            if (firstSlide?.image?.src) {
              await this.preloadImage(firstSlide.image.src);
            }
            
            this.isInitialLoad = false;
            this.isContentVisible = true;
          } catch (error) {
            // Если изображение не загрузилось, все равно показываем контент
            this.isInitialLoad = false;
            this.isContentVisible = true;
          }
        }
      },
      
      closeModal() {
        this.isModalOpen = false;
        this.currentProject = null;
        this.currentSlideIndex = 0;
        this.isContentVisible = true;
        this.isImageLoading = false;
        this.isInitialLoad = false;
        this.isImageZoomed = false;
        document.body.style.overflow = '';
      },
      
      zoomImage() {
        if (this.isTransitioning || this.isImageLoading || this.isInitialLoad) return;
        this.isImageZoomed = true;
      },
      
      closeZoom() {
        this.isImageZoomed = false;
      },
      
      preloadImage(src) {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => {
            // Определяем соотношение сторон
            this.currentImageAspectRatio = img.width / img.height;
            resolve(img);
          };
          img.onerror = () => reject();
          img.src = src;
        });
      },
      
      get isLandscapeImage() {
        return this.currentImageAspectRatio && this.currentImageAspectRatio > 1.5;
      },
      
      get imageContainerClasses() {
        if (this.isLandscapeImage) {
          return 'max-w-full max-h-[55vh] md:max-h-[60vh]';
        }
        return 'max-w-full max-h-[65vh] md:max-h-[70vh]';
      },
      
      get skeletonClasses() {
        if (this.isLandscapeImage) {
          return 'w-full max-w-5xl h-[55vh] md:h-[60vh]';
        }
        return 'w-full max-w-4xl h-[65vh] md:h-[70vh]';
      },
      
      async changeSlide(newIndex) {
        if (this.isTransitioning || !this.currentProject || !this.currentProject.slides) return;
        
        this.isTransitioning = true;
        this.isContentVisible = false;
        
        // Ждем завершения fade-out анимации
        await new Promise(resolve => setTimeout(resolve, 150));
        
        let skeletonTimeout;
        let imageLoaded = false;
        
        // Таймер для показа скелетона через 150ms если изображение еще не загрузилось
        skeletonTimeout = setTimeout(() => {
          if (!imageLoaded) {
            this.isImageLoading = true;
          }
        }, 150);
        
        try {
          // Предзагружаем новое изображение
          const newSlide = this.currentProject.slides[newIndex];
          if (newSlide?.image?.src) {
            await this.preloadImage(newSlide.image.src);
          }
          
          imageLoaded = true;
          clearTimeout(skeletonTimeout);
          
          // Скрываем скелетон и меняем слайд
          this.isImageLoading = false;
          this.currentSlideIndex = newIndex;
          this.isContentVisible = true;
          
          // Ждем завершения fade-in анимации
          await new Promise(resolve => setTimeout(resolve, 150));
          
        } catch (error) {
          // Если изображение не загрузилось, все равно показываем слайд
          imageLoaded = true;
          clearTimeout(skeletonTimeout);
          this.isImageLoading = false;
          this.currentSlideIndex = newIndex;
          this.isContentVisible = true;
          await new Promise(resolve => setTimeout(resolve, 150));
        }
        
        this.isTransitioning = false;
      },
      
      nextSlide() {
        if (!this.currentProject || !this.currentProject.slides) return;
        
        const totalSlides = this.currentProject.slides.length;
        const newIndex = (this.currentSlideIndex + 1) % totalSlides;
        this.changeSlide(newIndex);
      },
      
      prevSlide() {
        if (!this.currentProject || !this.currentProject.slides) return;
        
        const totalSlides = this.currentProject.slides.length;
        const newIndex = this.currentSlideIndex === 0 
          ? totalSlides - 1 
          : this.currentSlideIndex - 1;
        this.changeSlide(newIndex);
      },
      
      goToSlide(index) {
        if (!this.currentProject || !this.currentProject.slides || index === this.currentSlideIndex) return;
        this.changeSlide(index);
      },
      
      get currentSlide() {
        return this.currentProject?.slides?.[this.currentSlideIndex] || null;
      }
    }"
  >
    <Header />
    <PortfolioSection />
    <ContactSection />
    <Footer />

    <div 
      x-show="isModalOpen" 
      @click.self="closeModal()" 
      class="fixed inset-0 z-50 flex items-center justify-center"
      style="display: none; background: rgba(0, 0, 0, 0.8); backdrop-filter: blur(8px);"
    >
      <div 
        x-show="isModalOpen"
        @click.stop=""
        class="relative w-full max-w-7xl mx-auto bg-primary border border-white/10 rounded-[1.875rem] md:rounded-[1.25rem] shadow-xl overflow-hidden"
      >
        <div class="h-[90vh] overflow-y-auto modal-scrollbar">
          <div class="p-[3.75rem] md:p-[2.5rem]">
            <header class="space-y-[2.8125rem] md:space-y-[1.875rem] mb-8" x-show="currentProject">
              <div>
                <h3 
                  x-text="currentProject?.title || ''"
                  class="font-mv-skifer text-[4.6875rem] md:text-[3.125rem]"
                ></h3>
                <h4 
                  x-text="currentProject?.description || ''"
                  class="mb-4 font-extralight text-[3.28125rem] md:text-2xl leading-normal"
                  x-show="currentProject?.description"
                ></h4>
                <p 
                  class="font-onest text-[3.28125rem] md:text-[1.25rem]"
                  x-show="currentProject?.audience"
                >
                  <span class="font-semibold">Целевая аудитория: </span>
                  <span class="opacity-80" x-text="currentProject?.audience || ''"></span>
                </p>
              </div>
            </header>

            <div class="slider w-full max-w-[93.75rem] mx-auto overflow-hidden group relative" x-show="currentSlide">
              <div class="flex justify-center mb-6 relative">
                <!-- Скелетон загрузки (переключение слайдов) -->
                <div 
                  x-show="isImageLoading"
                  :class="skeletonClasses"
                  class="bg-white/5 rounded-[1.25rem] flex items-center justify-center relative overflow-hidden"
                >
                  <!-- Shimmer эффект -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full animate-shimmer"></div>
                  
                  <!-- Индикатор загрузки -->
                  <div class="relative z-10 flex flex-col items-center space-y-4">
                    <div class="w-12 h-12 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <p class="text-white/60 text-sm font-onest">Загрузка изображения...</p>
                  </div>
                </div>
                
                <!-- Скелетон начальной загрузки -->
                <div 
                  x-show="isInitialLoad"
                  class="w-full max-w-4xl h-[65vh] md:h-[70vh] bg-white/5 rounded-[1.25rem] flex items-center justify-center relative overflow-hidden"
                >
                  <!-- Shimmer эффект -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full animate-shimmer"></div>
                  
                  <!-- Индикатор загрузки -->
                  <div class="relative z-10 flex flex-col items-center space-y-4">
                    <div class="w-12 h-12 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <p class="text-white/60 text-sm font-onest">Загрузка проекта...</p>
                  </div>
                </div>
                
                <!-- Основное изображение -->
                <img
                  x-show="!isImageLoading && !isInitialLoad"
                  x-bind:src="currentSlide?.image?.src || ''"
                  x-bind:alt="`${currentProject?.title || ''} - слайд ${currentSlideIndex + 1}`"
                  @click="zoomImage()"
                  class="object-contain rounded-[1.25rem] transition-opacity duration-150 ease-in-out cursor-zoom-in hover:opacity-90"
                  x-bind:class="{
                    [imageContainerClasses]: true,
                    'opacity-0': !isContentVisible, 
                    'opacity-100': isContentVisible
                  }"
                  loading="lazy"
                  title="Нажмите для увеличения"
                />
              </div>

              <div class="flex justify-center items-center space-x-6 mb-6" x-show="currentProject?.slides?.length > 1">
                <button
                  @click="prevSlide()"
                  :disabled="isTransitioning"
                  class="border transition-all duration-300 rounded-full flex items-center justify-center text-7xl w-[5rem] h-[5rem] border-white/20 hover:bg-white hover:text-[#3624A6] cursor-pointer transform md:w-[3rem] md:h-[3rem] md:text-5xl select-none"
                  :class="{ 'opacity-50 cursor-not-allowed hover:bg-transparent hover:text-white': isTransitioning }"
                  aria-label="Предыдущий слайд"
                >&larr;</button>

                <div class="flex space-x-2">
                  <template x-for="(slide, index) in currentProject?.slides || []" :key="index">
                    <button
                      @click="goToSlide(index)"
                      :disabled="isTransitioning"
                      class="w-3 h-3 rounded-full border border-white/30 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/50 select-none"
                      :class="currentSlideIndex === index ? 'bg-white' : 'bg-white/20 hover:bg-white/40'"
                      :aria-label="`Перейти к слайду ${index + 1}`"
                    ></button>
                  </template>
                </div>

                <button
                  @click="nextSlide()"
                  :disabled="isTransitioning"
                  class="border transition-all duration-300 rounded-full flex items-center justify-center text-7xl w-[5rem] h-[5rem] border-white/20 hover:bg-white hover:text-[#3624A6] cursor-pointer transform md:w-[3rem] md:h-[3rem] md:text-5xl select-none"
                  :class="{ 'opacity-50 cursor-not-allowed hover:bg-transparent hover:text-white': isTransitioning }"
                  aria-label="Следующий слайд"
                >&rarr;</button>
              </div>

              <!-- Скелетон текстового контента при начальной загрузке -->
              <div x-show="isInitialLoad" class="font-onest text-[3.28125rem] md:text-[1.25rem] space-y-4">
                <div class="space-y-3">
                  <div class="h-6 bg-white/5 rounded animate-pulse"></div>
                  <div class="h-6 bg-white/5 rounded animate-pulse w-3/4"></div>
                </div>
                <div class="space-y-3">
                  <div class="h-6 bg-white/5 rounded animate-pulse"></div>
                  <div class="h-6 bg-white/5 rounded animate-pulse w-5/6"></div>
                </div>
              </div>
              
              <!-- Основной текстовый контент -->
              <div x-show="!isInitialLoad" class="font-onest text-[3.28125rem] md:text-[1.25rem] space-y-4 transition-opacity duration-150 ease-in-out" :class="{ 'opacity-0': !isContentVisible, 'opacity-100': isContentVisible }">
                <p x-show="currentSlide?.task">
                  <span class="font-semibold">Задача: </span>
                  <span class="opacity-80" x-text="currentSlide?.task || ''"></span>
                </p>
                <p x-show="currentSlide?.solution">
                  <span class="font-semibold">Решение: </span>
                  <span class="opacity-80" x-text="currentSlide?.solution || ''"></span>
                </p>
              </div>
            </div>
          </div>
        </div>

        <button
          @click="closeModal()"
          class="absolute top-6 right-6 p-4 md:p-2 rounded-full bg-black/40 backdrop-blur-sm hover:bg-black/60 focus:outline-none focus:ring-2 focus:ring-white/50 z-50 group transition-all duration-300 ease-in-out shadow-lg"
          aria-label="Закрыть"
        >
          <svg
            class="w-12 h-12 md:w-6 md:h-6 text-white/80 group-hover:text-white transition-colors duration-300 ease-in-out"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>

    <!-- Полноэкранный просмотр изображения -->
    <div 
      x-show="isImageZoomed" 
      @click.self="closeZoom()"
      class="fixed inset-0 z-[60] flex items-center justify-center p-4"
      style="display: none; background: rgba(0, 0, 0, 0.95); backdrop-filter: blur(8px);"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
    >
      <div class="relative w-full h-full flex items-center justify-center">
        <!-- Увеличенное изображение -->
        <img
          x-bind:src="currentSlide?.image?.src || ''"
          x-bind:alt="`${currentProject?.title || ''} - слайд ${currentSlideIndex + 1} (увеличено)`"
          class="max-w-full max-h-full object-contain cursor-zoom-out"
          @click="closeZoom()"
          title="Нажмите для закрытия"
        />
        
        <!-- Подсказка -->
        <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 backdrop-blur-sm rounded-lg px-4 py-2">
          <p class="text-white/80 text-sm font-onest">ESC или клик для закрытия</p>
        </div>
      </div>
    </div>
  </main>
</Layout>

